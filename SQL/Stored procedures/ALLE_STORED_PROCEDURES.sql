USE Euratex

/*==========================================================================*/
/* Alle stored procedures, zie voor extra toelichting het technisch ontwerp	*/
/*==========================================================================*/

/*==============================================================*/
/* INSERT EEN ASPECT				                            */
/*==============================================================*/
CREATE PROCEDURE SP_INSERT_ASPECT
	@ASPECT VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		INSERT INTO ASPECT(ASPECTNAAM)
		VALUES (@ASPECT)

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* INSERT EEN EFFECT				                            */
/*==============================================================*/
CREATE PROCEDURE SP_INSERT_EFFECT
	@EFFECT VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		INSERT INTO EFFECT(EFFECTNAAM)
		VALUES (@EFFECT)

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* INSERT EEN ASPECT_EFFECT									    */
/*==============================================================*/
CREATE PROCEDURE SP_INSERT_ASPECT_EFFECT
	@ASPECT		  VARCHAR(255),
	@EFFECT       VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		INSERT INTO ASPECT_EFFECT(ASPECTNAAM,EFFECTNAAM)
		VALUES (@ASPECT, @EFFECT)

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* INSERT EEN EFFECT EN ASPECT_EFFECT			                */
/*==============================================================*/
CREATE PROCEDURE SP_INSERT_ASPECT_EFFECT_EFFECT
	@ASPECT		  VARCHAR(255),
	@EFFECT       VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		INSERT INTO EFFECT(EFFECTNAAM)
		VALUES (@EFFECT)

		INSERT INTO ASPECT_EFFECT(ASPECTNAAM, EFFECTNAAM)
		VALUES (@ASPECT, @EFFECT)

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* UPDATE EEN ASPECT IN ASPECT		                            */
/*==============================================================*/
CREATE PROCEDURE SP_UPDATE_ASPECT
	@ASPECTNAAMOLD VARCHAR(255),
	@ASPECTNAAMNEW VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		UPDATE ASPECT
		SET ASPECTNAAM = @ASPECTNAAMNEW
		WHERE ASPECTNAAM = @ASPECTNAAMOLD

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* UPDATE EEN EFFECT				                            */
/*==============================================================*/
CREATE PROCEDURE SP_UPDATE_EFFECT
	@EFFECTNAAMOLD VARCHAR(255),
	@EFFECTNAAMNEW VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		UPDATE EFFECT
		SET EFFECTNAAM = @EFFECTNAAMNEW
		WHERE EFFECTNAAM = @EFFECTNAAMOLD

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* DELETE EEN ASPECT				                            */
/*==============================================================*/
CREATE PROCEDURE SP_DELETE_ASPECT
	@ASPECTNAAM VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		DELETE FROM ASPECT_EFFECT
		WHERE ASPECTNAAM = @ASPECTNAAM

		DELETE from ASPECT
		WHERE ASPECTNAAM = @ASPECTNAAM

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* DELETE EEN EFFECT				                            */
/*==============================================================*/
CREATE PROCEDURE SP_DELETE_EFFECT
	@EFFECTNAAM VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		DELETE FROM EFFECT
		WHERE EFFECTNAAM = @EFFECTNAAM

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* DELETE EEN ASPECT EN EFFECT IN ASPECT_EFFECT					*/
/*==============================================================*/
CREATE PROCEDURE SP_DELETE_EFFECT_BIJ_ASPECT_EFFECT
	@ASPECTNAAM VARCHAR(255),
	@EFFECTNAAM VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		DELETE from ASPECT_EFFECT
		WHERE ASPECTNAAM = @ASPECTNAAM
		AND EFFECTNAAM = @EFFECTNAAM

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* INSERT EEN BEDRIJF											*/
/*==============================================================*/
CREATE PROCEDURE SP_INSERT_BEDRIJF
		@BEDRIJFSNAAM VARCHAR(255),
		@LOCATIE VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		INSERT INTO BEDRIJF (BEDRIJFSNAAM, LOCATIE)
		VALUES (@BEDRIJFSNAAM, @LOCATIE)

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* UPDATE EEN BEDRIJF											*/
/*==============================================================*/
CREATE PROCEDURE SP_UPDATE_BEDRIJF
	@Bedrijfsnaam VARCHAR(255),
	@Locatie VARCHAR(255),
	@uBedrijfsnaam VARCHAR(255),
	@uLocatie VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		UPDATE BEDRIJF
		SET BEDRIJFSNAAM = @uBedrijfsnaam, LOCATIE = @uLocatie
		WHERE BEDRIJFSNAAM = @Bedrijfsnaam AND LOCATIE = @Locatie

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* DELETE EEN BEDRIJF											*/
/*==============================================================*/
CREATE PROCEDURE SP_DELETE_BEDRIJF
	@BEDRIJFSNAAM VARCHAR(255),
	@LOCATIE VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		DELETE FROM BEDRIJF
		WHERE LOCATIE = @LOCATIE
		AND BEDRIJFSNAAM = @BEDRIJFSNAAM

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* INSERT EEN PROJECT											*/
/*==============================================================*/
CREATE PROCEDURE SP_INSERT_PROJECT
	@BEDRIJFSNAAM VARCHAR(255),
	@LOCATIE VARCHAR(255),
	@PROJECTOMSCHRIJVING VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		INSERT INTO PROJECT (BEDRIJFSNAAM, LOCATIE, PROJECTOMSCHRIJVING)
		VALUES (@BEDRIJFSNAAM, @LOCATIE, @PROJECTOMSCHRIJVING)

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* UPDATE EEN PROJECT											*/
/*==============================================================*/
GO
CREATE PROCEDURE SP_UPDATE_PROJECT
	@PROJECTNUMMER VARCHAR(255),
	@PROJECTOMSCHRIJVING VARCHAR(255)
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		UPDATE PROJECT
		SET PROJECTOMSCHRIJVING = @PROJECTOMSCHRIJVING
		WHERE PROJECTNUMMER = @PROJECTNUMMER

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* DELETE EEN PROJECT											*/
/*==============================================================*/
CREATE PROCEDURE SP_DELETE_PROJECT
		@PROJECTNUMMER as INT
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		DELETE FROM PROJECT
		WHERE PROJECTNUMMER = @PROJECTNUMMER

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* INSERT EEN RAPPORT											*/
/*==============================================================*/
CREATE PROCEDURE SP_INSERT_RAPPORT
	@PROJECTNUMMER INT,
	@RAPPORT_TYPE VARCHAR(255)
AS BEGIN
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	-- Phantom mogelijk bij:
	-- EXISTS
	-- dbo.FN_GET_NEW_REGELNUMMER(@PROJECTNUMMER, @RAPPORTNUMMER)

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		IF EXISTS (
			SELECT 1
			FROM PROJECT
			WHERE PROJECTNUMMER = @PROJECTNUMMER
		) BEGIN
			INSERT INTO RAPPORT(PROJECTNUMMER,RAPPORTNUMMER, RAPPORT_TYPE)
			VALUES (@PROJECTNUMMER, dbo.FN_GET_NEW_RAPPORTNUMMER(@PROJECTNUMMER), @RAPPORT_TYPE)
		END ELSE BEGIN
			RAISERROR('Projectnummer bestaat niet.', 16, 1)
		END

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* DELETE EEN RAPPORT											*/
/*==============================================================*/
CREATE PROCEDURE SP_DELETE_RAPPORT
	@RAPPORTNUMMER INT,
	@PROJECTNUMMER INT
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		DELETE from RAPPORT
		WHERE PROJECTNUMMER = @PROJECTNUMMER
		AND RAPPORTNUMMER = @RAPPORTNUMMER

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* INSERT EEN ORGANISATIE RISICOREGEL							*/
/*==============================================================*/
GO
CREATE PROCEDURE SP_INSERT_ORGANISATIE_RISICOREGEL
	@PROJECTNUMMER INT,
	@RAPPORTNUMMER INT,
	@ASPECTNAAM VARCHAR(255),
	@EFFECTNAAM VARCHAR(255),
	@ARBO_ONDERWERP VARCHAR(255),
	@RISICO_OMSCHRIJVING_OF_BEVINDING VARCHAR(255),
	@HUIDIGE_BEHEERSMAATREGEL VARCHAR(255),
	@VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL VARCHAR(255),
	@AFWIJKENDE_ACTIE_TER_UITVOERING VARCHAR(255),
	@RESTRISICO VARCHAR(255),
	@VOOR_ERNST_VAN_ONGEVAL NUMERIC(9, 2),
	@VOOR_KANS_OP_BLOOTSTELLING NUMERIC(9, 2),
	@VOOR_KANS_OP_WAARSCHIJNLIJKHEID NUMERIC(9, 2),
	@NA_ERNST_VAN_ONGEVAL NUMERIC(9, 2),
	@NA_KANS_OP_BLOOTSTELLING NUMERIC(9, 2),
	@NA_KANS_OP_WAARSCHIJNLIJKHEID NUMERIC(9, 2)
AS BEGIN
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	-- Phantom mogelijk bij:
	-- EXISTS
	-- dbo.FN_GET_NEW_REGELNUMMER(@PROJECTNUMMER, @RAPPORTNUMMER)

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		IF EXISTS (
			SELECT 1
			FROM RAPPORT
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			AND RAPPORTNUMMER = @RAPPORTNUMMER
		) BEGIN
			IF EXISTS (
				SELECT 1
				FROM RAPPORT
				WHERE PROJECTNUMMER = @PROJECTNUMMER
				AND RAPPORTNUMMER = @RAPPORTNUMMER
				AND RAPPORT_TYPE = 'Organisatie'
			) BEGIN
				INSERT RISICOREGEL
				VALUES (
					@PROJECTNUMMER,
					@RAPPORTNUMMER,
					dbo.FN_GET_NEW_REGELNUMMER(@PROJECTNUMMER, @RAPPORTNUMMER),
					@ASPECTNAAM,
					@EFFECTNAAM,
					@ARBO_ONDERWERP,
					@RISICO_OMSCHRIJVING_OF_BEVINDING,
					@HUIDIGE_BEHEERSMAATREGEL,
					@VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL,
					@VOOR_ERNST_VAN_ONGEVAL,
					@VOOR_KANS_OP_BLOOTSTELLING,
					@VOOR_KANS_OP_WAARSCHIJNLIJKHEID,
					@AFWIJKENDE_ACTIE_TER_UITVOERING,
					@RESTRISICO,
					@NA_ERNST_VAN_ONGEVAL,
					@NA_KANS_OP_BLOOTSTELLING,
					@NA_KANS_OP_WAARSCHIJNLIJKHEID
				)
			END ELSE BEGIN
				RAISERROR('Om deze SP te gebruiken moet RAPPORT.RAPPORT_TYPE "Organisatie" zijn.', 16, 1)
			END
		END ELSE BEGIN
			RAISERROR('Projectnummer en/of rapportnummer bestaat niet.', 16, 1)
		END

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
	END CATCH
END
GO

/*==============================================================*/
/* UPDATE EEN ORGANISATIE RISICOREGEL							*/
/*==============================================================*/
GO
CREATE PROCEDURE SP_UPDATE_ORGANISATIE_RISICOREGEL
	@PROJECTNUMMER INT,
	@RAPPORTNUMMER INT,
	@REGELNUMMER INT,
	@ASPECTNAAM VARCHAR(255),
	@EFFECTNAAM VARCHAR(255),
	@ARBO_ONDERWERP VARCHAR(255),
	@RISICO_OMSCHRIJVING_OF_BEVINDING VARCHAR(255),
	@HUIDIGE_BEHEERSMAATREGEL VARCHAR(255),
	@VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL VARCHAR(255),
	@AFWIJKENDE_ACTIE_TER_UITVOERING VARCHAR(255),
	@RESTRISICO VARCHAR(255),
	@VOOR_ERNST_VAN_ONGEVAL NUMERIC(9, 2),
	@VOOR_KANS_OP_BLOOTSTELLING NUMERIC(9, 2),
	@VOOR_KANS_OP_WAARSCHIJNLIJKHEID NUMERIC(9, 2),
	@NA_ERNST_VAN_ONGEVAL NUMERIC(9, 2),
	@NA_KANS_OP_BLOOTSTELLING NUMERIC(9, 2),
	@NA_KANS_OP_WAARSCHIJNLIJKHEID NUMERIC(9, 2)
AS BEGIN
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	-- Phantom mogelijk bij:
	-- EXISTS

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		IF EXISTS (
			SELECT 1
			FROM RISICOREGEL
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			AND RAPPORTNUMMER = @RAPPORTNUMMER
			AND REGELNUMMER = @REGELNUMMER
		) BEGIN
			IF EXISTS (
				SELECT 1
				FROM RAPPORT
				WHERE PROJECTNUMMER = @PROJECTNUMMER
				AND RAPPORTNUMMER = @RAPPORTNUMMER
				AND RAPPORT_TYPE = 'Organisatie'
			) BEGIN
				UPDATE RISICOREGEL
				SET ASPECTNAAM = @ASPECTNAAM,
					EFFECTNAAM = @EFFECTNAAM,
					ARBO_ONDERWERP = @ARBO_ONDERWERP,
					RISICO_OMSCHRIJVING_OF_BEVINDING = @RISICO_OMSCHRIJVING_OF_BEVINDING,
					HUIDIGE_BEHEERSMAATREGEL = @HUIDIGE_BEHEERSMAATREGEL,
					VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL = @VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL,
					VOOR_ERNST_VAN_ONGEVAL = @VOOR_ERNST_VAN_ONGEVAL,
					VOOR_KANS_OP_BLOOTSTELLING = @VOOR_KANS_OP_BLOOTSTELLING,
					VOOR_KANS_OP_WAARSCHIJNLIJKHEID = @VOOR_KANS_OP_WAARSCHIJNLIJKHEID,
					AFWIJKENDE_ACTIE_TER_UITVOERING = @AFWIJKENDE_ACTIE_TER_UITVOERING,
					RESTRISICO = @RESTRISICO,
					NA_ERNST_VAN_ONGEVAL = @NA_ERNST_VAN_ONGEVAL,
					NA_KANS_OP_BLOOTSTELLING = @NA_KANS_OP_BLOOTSTELLING,
					NA_KANS_OP_WAARSCHIJNLIJKHEID = @NA_KANS_OP_WAARSCHIJNLIJKHEID
				WHERE PROJECTNUMMER = @PROJECTNUMMER
				AND RAPPORTNUMMER = @RAPPORTNUMMER
				AND REGELNUMMER = @REGELNUMMER
			END ELSE BEGIN
				RAISERROR('Om deze SP te gebruiken moet RAPPORT.RAPPORT_TYPE "Organisatie" zijn.', 16, 1)
			END
		END ELSE BEGIN
			RAISERROR('Projectnummer en/of rapportnummer en/of regelnummer bestaat niet.', 16, 1)
		END

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
	END CATCH
END
GO

/*==============================================================*/
/* INSERT EEN VISUELE BEOORDELING RISICOREGEL					*/
/*==============================================================*/
GO
CREATE PROCEDURE SP_INSERT_VISUELE_BEOORDELING_RISICOREGEL
	@PROJECTNUMMER INT,
	@RAPPORTNUMMER INT,
	@ASPECTNAAM VARCHAR(255),
	@EFFECTNAAM VARCHAR(255),
	@ARBO_ONDERWERP VARCHAR(255),
	@RISICO_OMSCHRIJVING_OF_BEVINDING VARCHAR(255),
	@HUIDIGE_BEHEERSMAATREGEL VARCHAR(255),
	@VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL VARCHAR(255),
	@AFWIJKENDE_ACTIE_TER_UITVOERING VARCHAR(255),
	@RESTRISICO VARCHAR(255),
	@PROCES VARCHAR(255),
	@MACHINE_ONDERDEEL VARCHAR(255),
	@AFDELING VARCHAR(255),
	@VOOR_ERNST_VAN_ONGEVAL NUMERIC(9, 2),
	@VOOR_KANS_OP_BLOOTSTELLING NUMERIC(9, 2),
	@VOOR_KANS_OP_WAARSCHIJNLIJKHEID NUMERIC(9, 2),
	@NA_ERNST_VAN_ONGEVAL NUMERIC(9, 2),
	@NA_KANS_OP_BLOOTSTELLING NUMERIC(9, 2),
	@NA_KANS_OP_WAARSCHIJNLIJKHEID NUMERIC(9, 2)
AS BEGIN
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	-- Phantom mogelijk bij:
	-- EXISTS
	-- dbo.FN_GET_NEW_REGELNUMMER(@PROJECTNUMMER, @RAPPORTNUMMER)

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		IF EXISTS (
			SELECT 1
			FROM RAPPORT
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			AND RAPPORTNUMMER = @RAPPORTNUMMER
		) BEGIN
			IF EXISTS (
				SELECT 1
				FROM RAPPORT
				WHERE PROJECTNUMMER = @PROJECTNUMMER
				AND RAPPORTNUMMER = @RAPPORTNUMMER
				AND RAPPORT_TYPE = 'Visuele beoordeling'
			) BEGIN
				INSERT RISICOREGEL
				VALUES (
					@PROJECTNUMMER,
					@RAPPORTNUMMER,
					dbo.FN_GET_NEW_REGELNUMMER(@PROJECTNUMMER, @RAPPORTNUMMER),
					@ASPECTNAAM,
					@EFFECTNAAM,
					@ARBO_ONDERWERP,
					@RISICO_OMSCHRIJVING_OF_BEVINDING,
					@HUIDIGE_BEHEERSMAATREGEL,
					@VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL,
					@VOOR_ERNST_VAN_ONGEVAL,
					@VOOR_KANS_OP_BLOOTSTELLING,
					@VOOR_KANS_OP_WAARSCHIJNLIJKHEID,
					@AFWIJKENDE_ACTIE_TER_UITVOERING,
					@RESTRISICO,
					@NA_ERNST_VAN_ONGEVAL,
					@NA_KANS_OP_BLOOTSTELLING,
					@NA_KANS_OP_WAARSCHIJNLIJKHEID
				)

				INSERT VISUELE_BEOORDELING
				VALUES (@PROJECTNUMMER, @RAPPORTNUMMER, @REGELNUMMER, @PROCES, @MACHINE_ONDERDEEL, @AFDELING)
			END ELSE BEGIN
				RAISERROR('Om deze SP te gebruiken moet RAPPORT.RAPPORT_TYPE "Visuele beoordeling" zijn.', 16, 1)
			END
		END ELSE BEGIN
			RAISERROR('Projectnummer en/of rapportnummer bestaat niet.', 16, 1)
		END

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
	END CATCH
END
GO

/*==============================================================*/
/* UPDATE EEN VISUELE BEOORDELING RISICOREGEL					*/
/*==============================================================*/
GO
CREATE PROCEDURE SP_UPDATE_VISUELE_BEOORDELING_RISICOREGEL
	@PROJECTNUMMER INT,
	@RAPPORTNUMMER INT,
	@REGELNUMMER INT,
	@ASPECTNAAM VARCHAR(255),
	@EFFECTNAAM VARCHAR(255),
	@ARBO_ONDERWERP VARCHAR(255),
	@RISICO_OMSCHRIJVING_OF_BEVINDING VARCHAR(255),
	@HUIDIGE_BEHEERSMAATREGEL VARCHAR(255),
	@VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL VARCHAR(255),
	@AFWIJKENDE_ACTIE_TER_UITVOERING VARCHAR(255),
	@RESTRISICO VARCHAR(255),
	@PROCES VARCHAR(255),
	@MACHINE_ONDERDEEL VARCHAR(255),
	@AFDELING VARCHAR(255),
	@VOOR_ERNST_VAN_ONGEVAL NUMERIC(9, 2),
	@VOOR_KANS_OP_BLOOTSTELLING NUMERIC(9, 2),
	@VOOR_KANS_OP_WAARSCHIJNLIJKHEID NUMERIC(9, 2),
	@NA_ERNST_VAN_ONGEVAL NUMERIC(9, 2),
	@NA_KANS_OP_BLOOTSTELLING NUMERIC(9, 2),
	@NA_KANS_OP_WAARSCHIJNLIJKHEID NUMERIC(9, 2)
AS BEGIN
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	-- Phantom mogelijk bij:
	-- EXISTS

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		IF EXISTS (
			SELECT 1
			FROM RISICOREGEL
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			AND RAPPORTNUMMER = @RAPPORTNUMMER
			AND REGELNUMMER = @REGELNUMMER
		) BEGIN
			IF EXISTS (
				SELECT 1
				FROM RAPPORT
				WHERE PROJECTNUMMER = @PROJECTNUMMER
				AND RAPPORTNUMMER = @RAPPORTNUMMER
				AND RAPPORT_TYPE = 'Visuele beoordeling'
			) BEGIN
				UPDATE RISICOREGEL
				SET ASPECTNAAM = @ASPECTNAAM,
					EFFECTNAAM = @EFFECTNAAM,
					ARBO_ONDERWERP = @ARBO_ONDERWERP,
					RISICO_OMSCHRIJVING_OF_BEVINDING = @RISICO_OMSCHRIJVING_OF_BEVINDING,
					HUIDIGE_BEHEERSMAATREGEL = @HUIDIGE_BEHEERSMAATREGEL,
					VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL = @VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL,
					VOOR_ERNST_VAN_ONGEVAL = @VOOR_ERNST_VAN_ONGEVAL,
					VOOR_KANS_OP_BLOOTSTELLING = @VOOR_KANS_OP_BLOOTSTELLING,
					VOOR_KANS_OP_WAARSCHIJNLIJKHEID = @VOOR_KANS_OP_WAARSCHIJNLIJKHEID,
					AFWIJKENDE_ACTIE_TER_UITVOERING = @AFWIJKENDE_ACTIE_TER_UITVOERING,
					RESTRISICO = @RESTRISICO,
					NA_ERNST_VAN_ONGEVAL = @NA_ERNST_VAN_ONGEVAL,
					NA_KANS_OP_BLOOTSTELLING = @NA_KANS_OP_BLOOTSTELLING,
					NA_KANS_OP_WAARSCHIJNLIJKHEID = @NA_KANS_OP_WAARSCHIJNLIJKHEID
				WHERE PROJECTNUMMER = @PROJECTNUMMER
				AND RAPPORTNUMMER = @RAPPORTNUMMER
				AND REGELNUMMER = @REGELNUMMER

				UPDATE VISUELE_BEOORDELING
				SET PROCES = @PROCES,
					MACHINE_ONDERDEEL_ = @MACHINE_ONDERDEEL,
					AFDELING = @AFDELING
				WHERE PROJECTNUMMER = @PROJECTNUMMER
				AND RAPPORTNUMMER = @RAPPORTNUMMER
				AND REGELNUMMER = REGELNUMMER
			END ELSE BEGIN
				RAISERROR('Om deze SP te gebruiken moet RAPPORT.RAPPORT_TYPE "Visuele beoordeling" zijn.', 16, 1)
			END
		END ELSE BEGIN
			RAISERROR('Projectnummer en/of rapportnummer en/of regelnummer bestaat niet.', 16, 1)
		END

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
	END CATCH
END
GO

<<<<<<< HEAD:SQL/Stored procedures/Alle_storedProcs.sql
/*=================================================================================================*/
GO

CREATE PROCEDURE SP_UPDATE_PLAN_VAN_AANPAK
@PROJECTNUMMER int,
@RAPPORTNUMMER int,
@REGELNUMMER int,
@UITGEVOERD_DOOR varchar(255),
@EINDVERANTWOORDELIJKE varchar(255),
@DATUM_GEREED_GEPLAND date,
@PBM varchar(255),
@VOORLICHTING varchar(255),
@WERKINSTRUCTIE_PROCEDURE varchar(255),
@TRA varchar(255),
@CONTRACT_LIJST_ varchar(255)
AS
BEGIN
  SET NOCOUNT, XACT_ABORT ON

  DECLARE @TranCounter int;

  SET @TranCounter = @@TRANCOUNT;

  IF @TranCounter > 0
    SAVE TRANSACTION proceduresave;
  ELSE
    BEGIN TRANSACTION;

    BEGIN TRY
      IF EXISTS (SELECT
          1
        FROM PLAN_VAN_AANPAK
        WHERE projectnummer = @PROJECTNUMMER
        AND rapportnummer = @RAPPORTNUMMER
        AND regelnummer = @REGELNUMMER)
      BEGIN
        UPDATE PLAN_VAN_AANPAK
        SET projectnummer = @PROJECTNUMMER, rapportnummer = @RAPPORTNUMMER, regelnummer = @REGELNUMMER, uitgevoerd_door = @UITGEVOERD_DOOR, eindverantwoordelijke = @EINDVERANTWOORDELIJKE, datum_gereed_gepland = @DATUM_GEREED_GEPLAND,PBM = @PBM, voorlichting = @VOORLICHTING, werkinstructie_procedure = @WERKINSTRUCTIE_PROCEDURE, TRA = @TRA, contract_lijst_ = @CONTRACT_LIJST_
        WHERE projectnummer = @PROJECTNUMMER AND rapportnummer = @RAPPORTNUMMER AND regelnummer = @REGELNUMMER
      END
      ELSE
      BEGIN
        RAISERROR ('Om deze SP te kunnen gebruiken dient de combinatie projectnummer+rapportnummer+regelnummer te bestaan.', 16, 1)
      END

      IF @TranCounter = 0
        AND XACT_STATE() = 1
      COMMIT TRANSACTION;
  END TRY

  BEGIN CATCH
    IF @TranCounter = 0
    BEGIN
      IF XACT_STATE() = 1
        ROLLBACK TRANSACTION;
    END;
    ELSE
    BEGIN
      IF XACT_STATE() <> -1
        ROLLBACK TRANSACTION proceduresave;
    END;

    THROW
  END CATCH
END
GO
/*=================================================================================================*/

GO

CREATE PROCEDURE SP_INSERT_PERIODIEKE_BEOORDELING
    @PROJECTNUMMER int,
    @RAPPORTNUMMER int,
    @REGELNUMMER int,
    @DATUM_BEOORDELING date,
    @INSPECTIE_IS_DE_ACTIE_UITGEVOERD bit,
    @OPMERKING_STAND_VAN_ZAKEN text,
    @STAND_VAN_ZAKEN varchar(255),
    @SCORE numeric
AS
  BEGIN
    SET NOCOUNT, XACT_ABORT ON

    DECLARE @TranCounter int;

    SET @TranCounter = @@TRANCOUNT;

    IF @TranCounter > 0
      SAVE TRANSACTION proceduresave;
    ELSE
      BEGIN TRANSACTION;

    BEGIN TRY
    IF EXISTS (SELECT
                 1
               FROM PLAN_VAN_AANPAK
               WHERE projectnummer = @PROJECTNUMMER
                     AND rapportnummer = @RAPPORTNUMMER
                     AND regelnummer = @REGELNUMMER)
      BEGIN
        INSERT PERIODIEKE_BEOORDELING
        VALUES (@PROJECTNUMMER, @RAPPORTNUMMER, @REGELNUMMER, @DATUM_BEOORDELING, @INSPECTIE_IS_DE_ACTIE_UITGEVOERD, @OPMERKING_STAND_VAN_ZAKEN, @STAND_VAN_ZAKEN, @SCORE)
	  END
    ELSE
      BEGIN
        RAISERROR ('Om deze SP te kunnen gebruiken dient het plan van aanpak te bestaan.', 16, 1)
      END

    IF @TranCounter = 0
       AND XACT_STATE() = 1
      COMMIT TRANSACTION;
    END TRY

    BEGIN CATCH
    IF @TranCounter = 0
      BEGIN
        IF XACT_STATE() = 1
          ROLLBACK TRANSACTION;
      END;
    ELSE
      BEGIN
        IF XACT_STATE() <> -1
          ROLLBACK TRANSACTION proceduresave;
      END;

    THROW
    END CATCH
  END
GO

/*=================================================================================================*/

GO

CREATE PROCEDURE SP_UPDATE_PERIODIEKE_BEOORDELING
    @PROJECTNUMMER int,
    @RAPPORTNUMMER int,
    @REGELNUMMER int,
    @DATUM_BEOORDELING_OUD date,
    @DATUM_BEOORDELING_NIEUW date,
    @INSPECTIE_IS_DE_ACTIE_UITGEVOERD bit,
    @OPMERKING_STAND_VAN_ZAKEN text,
    @STAND_VAN_ZAKEN varchar(255),
    @SCORE numeric
AS
  BEGIN
    SET NOCOUNT, XACT_ABORT ON

    DECLARE @TranCounter int;

    SET @TranCounter = @@TRANCOUNT;

    IF @TranCounter > 0
      SAVE TRANSACTION proceduresave;
    ELSE
      BEGIN TRANSACTION;

    BEGIN TRY
    IF EXISTS (SELECT
                 1
               FROM PERIODIEKE_BEOORDELING
               WHERE projectnummer = @PROJECTNUMMER
                     AND rapportnummer = @RAPPORTNUMMER
                     AND regelnummer = @REGELNUMMER
					 AND datum_beoordeling = @DATUM_BEOORDELING_OUD)
      BEGIN
        UPDATE PERIODIEKE_BEOORDELING
        SET datum_beoordeling = @DATUM_BEOORDELING_NIEUW, inspectie_is_de_actie_uitgevoerd = @INSPECTIE_IS_DE_ACTIE_UITGEVOERD, opmerking_stand_van_zaken = @OPMERKING_STAND_VAN_ZAKEN, stand_van_zaken = @STAND_VAN_ZAKEN, score = @SCORE
		WHERE projectnummer = @PROJECTNUMMER
                     AND rapportnummer = @RAPPORTNUMMER
                     AND regelnummer = @REGELNUMMER
					 AND datum_beoordeling = @DATUM_BEOORDELING_OUD
	  END
    ELSE
      BEGIN
        RAISERROR ('Om deze SP te kunnen gebruiken dient het desbetreffende periodieke beoordeling te bestaan.', 16, 1)
      END

    IF @TranCounter = 0
       AND XACT_STATE() = 1
      COMMIT TRANSACTION;
    END TRY

    BEGIN CATCH
    IF @TranCounter = 0
      BEGIN
        IF XACT_STATE() = 1
          ROLLBACK TRANSACTION;
      END;
    ELSE
      BEGIN
        IF XACT_STATE() <> -1
          ROLLBACK TRANSACTION proceduresave;
      END;

    THROW
    END CATCH
  END
GO


/*=================================================================================================*/


CREATE PROCEDURE SP_DELETE_RAPPORT
		@RAPPORTNUMMER as INT,
		@PROJECTNUMMER as INT
AS
	BEGIN
		SET NOCOUNT, XACT_ABORT ON
		DECLARE @TranCounter INT;
		SET @TranCounter = @@TRANCOUNT;

		IF @TranCounter > 0
			SAVE TRANSACTION ProcedureSave;
		ELSE
			BEGIN TRANSACTION;

		BEGIN TRY

		--1. Delete project
		DELETE from RAPPORT
		WHERE PROJECTNUMMER = @PROJECTNUMMER
			AND RAPPORTNUMMER = @RAPPORTNUMMER

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
		END TRY
		BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
		END CATCH
	END
GO

=======
/*==============================================================*/
/* INSERT EEN MACHINEVEILIGHEID RISICOREGEL						*/
/*==============================================================*/
>>>>>>> d4f56d4915ac48be675fb444c4c8ecbd54a3ef34:SQL/Stored procedures/ALLE_STORED_PROCEDURES.sql
GO
CREATE PROCEDURE SP_INSERT_MACHINEVEILIGHEID_RISICOREGEL
	@PROJECTNUMMER INT,
	@RAPPORTNUMMER INT,
	@PID VARCHAR(255),
	@LIJN VARCHAR(255),
	@ASPECTNAAM VARCHAR(255),
	@EFFECTNAAM VARCHAR(255),
	@ARBO_ONDERWERP VARCHAR(255),
	@RISICO_OMSCHRIJVING_OF_BEVINDING VARCHAR(255),
	@HUIDIGE_BEHEERSMAATREGEL VARCHAR(255),
	@VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL VARCHAR(255),
	@AFWIJKENDE_ACTIE_TER_UITVOERING VARCHAR(255),
	@RESTRISICO VARCHAR(255),
	@PROCES VARCHAR(255),
	@MACHINE_ONDERDEEL VARCHAR(255),
	@AFDELING VARCHAR(255),
	@MACHINE_CODE VARCHAR(255),
	@MACHINE VARCHAR(255),
	@MODEL_TYPE VARCHAR(255),
	@SERIENUMMER VARCHAR(255),
	@LEVERANCIER VARCHAR(255),
	@CE_MARKERING VARCHAR(255),
	@CE_DOCUCHECK VARCHAR(255),
	@AANVULLENDE_OMSCHRIJVING VARCHAR(255),
	@TAKEN VARCHAR(255),
	@TRANSPORT BIT,
	@MONTAGE BIT,
	@IN_BEDRIJFSNAME BIT,
	@TIJDENS_PRODUCTIE BIT,
	@TIJDENS_ONDERHOUD BIT,
	@TIJDENS_STORING BIT,
	@TIJDENS_REINIGEN BIT,
	@TIJDENS_AFSTELLEN BIT,
	@DEMONTAGE BIT,
	@ONTWERP BIT,
	@AFSCHERMING BIT,
	@INSTRUCTIE BIT,
	@FREQUENTIE NUMERIC(9, 2),
	@MOGELIJKHEID_OPTREDEN_GEVAARLIJKE_GEBEURTENIS NUMERIC(9, 2),
	@MOGELIJKHEID_VOORKOMEN_OF_BEPERKEN_SCHADE NUMERIC(9, 2),
	@ERNST_VAN_DE_GEVOLGEN NUMERIC(9, 2),
	@VOOR_ERNST_VAN_HET_ONGEVAL NUMERIC(9, 2),
	@VOOR_KANS_OP_BLOOTSTELLING NUMERIC(9, 2),
	@VOOR_KANS_OP_WAARSCHIJNLIJKHEID NUMERIC(9, 2),
	@NA_ERNST_VAN_ONGEVAL NUMERIC(9, 2),
	@NA_KANS_OP_BLOOTSTELLING NUMERIC(9, 2),
	@NA_KANS_OP_WAARSCHIJNLIJKHEID NUMERIC(9, 2)

AS BEGIN
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	-- Phantom mogelijk bij:
	-- EXISTS
	-- dbo.FN_GET_NEW_REGELNUMMER(@PROJECTNUMMER, @RAPPORTNUMMER)

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		IF EXISTS (
			SELECT 1
			FROM RAPPORT
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			AND RAPPORTNUMMER = @RAPPORTNUMMER
		) BEGIN
			IF EXISTS (
				SELECT 1
				FROM RAPPORT
				WHERE PROJECTNUMMER = @PROJECTNUMMER
				AND RAPPORTNUMMER = @RAPPORTNUMMER
				AND RAPPORT_TYPE = 'Machineveiligheid'
			) BEGIN
				DECLARE @REGELNUMMER INT = dbo.FN_GET_NEW_REGELNUMMER(@PROJECTNUMMER, @RAPPORTNUMMER)
				INSERT RISICOREGEL
				VALUES (@PROJECTNUMMER,
					@RAPPORTNUMMER,
					@REGELNUMMER,
					@ASPECTNAAM,
					@EFFECTNAAM,
					@ARBO_ONDERWERP,
					@RISICO_OMSCHRIJVING_OF_BEVINDING,
					@HUIDIGE_BEHEERSMAATREGEL,
					@VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL,
					@VOOR_ERNST_VAN_HET_ONGEVAL,
					@VOOR_KANS_OP_BLOOTSTELLING,
					@VOOR_KANS_OP_WAARSCHIJNLIJKHEID,
					@AFWIJKENDE_ACTIE_TER_UITVOERING,
					@RESTRISICO,
					@NA_ERNST_VAN_ONGEVAL,
					@NA_KANS_OP_BLOOTSTELLING,
					@NA_KANS_OP_WAARSCHIJNLIJKHEID
				)

				INSERT VISUELE_BEOORDELING
				VALUES (@PROJECTNUMMER, @RAPPORTNUMMER, @REGELNUMMER, @PROCES, @MACHINE_ONDERDEEL, @AFDELING)

				INSERT MACHINEVEILIGHEID(PROJECTNUMMER, RAPPORTNUMMER, REGELNUMMER, PID, LIJN, MACHINE_CODE, MACHINE, MODEL_TYPE, SERIENUMMER, LEVERANCIER, CE_MARKERING, CE_DOCUCHECK, AANVULLENDE_OMSCHRIJVING, TAKEN, TRANSPORT, MONTAGE, IN_BEDRIJFSNAME, TIJDENS_PRODUCTIE, TIJDENS_ONDERHOUD, TIJDENS_STORING, TIJDENS_REINIGEN, TIJDENS_AFSTELLEN, DEMONTAGE, ONTWERP, AFSCHERMING, INSTRUCTIE, FREQUENTIE, MOGELIJKHEID_OPTREDEN_GEVAARLIJKE_GEBEURTENIS, MOGELIJKHEID_VOORKOMEN_OF_BEPERKEN_SCHADE, ERNST_VAN_DE_GEVOLGEN)
				VALUES (@PROJECTNUMMER,
					@RAPPORTNUMMER,
					@REGELNUMMER,
					@PID,
					@LIJN,
					@MACHINE_CODE,
					@MACHINE,
					@MODEL_TYPE,
					@SERIENUMMER,
					@LEVERANCIER,
					@CE_MARKERING,
					@CE_DOCUCHECK,
					@AANVULLENDE_OMSCHRIJVING,
					@TAKEN,
					@TRANSPORT,
					@MONTAGE,
					@IN_BEDRIJFSNAME,
					@TIJDENS_PRODUCTIE,
					@TIJDENS_ONDERHOUD,
					@TIJDENS_STORING,
					@TIJDENS_REINIGEN,
					@TIJDENS_AFSTELLEN,
					@DEMONTAGE,
					@ONTWERP,
					@AFSCHERMING,
					@INSTRUCTIE,
					@FREQUENTIE,
					@MOGELIJKHEID_OPTREDEN_GEVAARLIJKE_GEBEURTENIS,
					@MOGELIJKHEID_VOORKOMEN_OF_BEPERKEN_SCHADE,
					@ERNST_VAN_DE_GEVOLGEN)

				-- Insert nieuwe tabel...
			END ELSE BEGIN
				RAISERROR('Om deze SP te gebruiken moet RAPPORT.RAPPORT_TYPE "Machine veiligheid" zijn.', 16, 1)
			END
		END ELSE BEGIN
			RAISERROR('Projectnummer en/of rapportnummer bestaat niet.', 16, 1)
		END

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
	END CATCH
END
GO

/*==============================================================*/
/* UPDATE EEN MACHINEVEILIGHEID RISICOREGEL						*/
/*==============================================================*/
CREATE PROCEDURE SP_UPDATE_MACHINEVEILIGHEID_RISICOREGEL
		@PROJECTNUMMER                                 INT,
		@RAPPORTNUMMER                                 INT,
		@REGELNUMMER                                   INT,
		@PID                                           VARCHAR(255),
		@LIJN                                          VARCHAR(255),
		@MACHINE_CODE                                  VARCHAR(255),
		@ASPECTNAAM                                    VARCHAR(255),
		@EFFECTNAAM                                    VARCHAR(255),
		@ARBO_ONDERWERP                                VARCHAR(255),
		@RISICO_OMSCHRIJVING_OF_BEVINDING              VARCHAR(255),
		@HUIDIGE_BEHEERSMAATREGEL                      VARCHAR(255),
		@VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL   VARCHAR(255),
		@AFWIJKENDE_ACTIE_TER_UITVOERING               VARCHAR(255),
		@RESTRISICO                                    VARCHAR(255),
		@PROCES                                        VARCHAR(255),
		@MACHINE_ONDERDEEL_                             VARCHAR(255),
		@AFDELING                                      VARCHAR(255),
		@MACHINE                                       VARCHAR(255),
		@MODEL_TYPE                                    VARCHAR(255),
		@SERIENUMMER                                   VARCHAR(255),
		@LEVERANCIER                                   VARCHAR(255),
		@CE_MARKERING                                  VARCHAR(255),
		@CE_DOCUCHECK                                  VARCHAR(255),
		@AANVULLENDE_OMSCHRIJVING                      VARCHAR(255),
		@TAKEN                                         VARCHAR(255),
		@TRANSPORT                                     BIT,
		@MONTAGE                                       BIT,
		@IN_BEDRIJFSNAME                               BIT,
		@TIJDENS_PRODUCTIE                             BIT,
		@TIJDENS_ONDERHOUD                             BIT,
		@TIJDENS_STORING                               BIT,
		@TIJDENS_REINIGEN                              BIT,
		@TIJDENS_AFSTELLEN                             BIT,
		@DEMONTAGE                                     BIT,
		@ONTWERP                                       BIT,
		@AFSCHERMING                                   BIT,
		@INSTRUCTIE                                    BIT,
		@FREQUENTIE                                    NUMERIC(9, 2),
		@MOGELIJKHEID_OPTREDEN_GEVAARLIJKE_GEBEURTENIS NUMERIC(9, 2),
		@MOGELIJKHEID_VOORKOMEN_OF_BEPERKEN_SCHADE     NUMERIC(9, 2),
		@ERNST_VAN_DE_GEVOLGEN                         NUMERIC(9, 2),
		@VOOR_ERNST_VAN_ONGEVAL                    NUMERIC(9, 2),
		@VOOR_KANS_OP_BLOOTSTELLING                    NUMERIC(9, 2),
		@VOOR_KANS_OP_WAARSCHIJNLIJKHEID               NUMERIC(9, 2),
		@NA_ERNST_VAN_ONGEVAL                          NUMERIC(9, 2),
		@NA_KANS_OP_BLOOTSTELLING                      NUMERIC(9, 2),
		@NA_KANS_OP_WAARSCHIJNLIJKHEID                 NUMERIC(9, 2)
AS BEGIN
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	-- Phantom mogelijk bij:
	-- EXISTS
	-- dbo.FN_GET_NEW_REGELNUMMER(@PROJECTNUMMER, @RAPPORTNUMMER)

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		IF EXISTS(
			SELECT 1
			FROM RAPPORT
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			      AND RAPPORTNUMMER = @RAPPORTNUMMER
			      AND RAPPORT_TYPE = 'Machineveiligheid'
		)
		BEGIN
			UPDATE RISICOREGEL
			SET ASPECTNAAM                                  = @ASPECTNAAM,
				EFFECTNAAM                                  = @EFFECTNAAM,
				ARBO_ONDERWERP                              = @ARBO_ONDERWERP,
				RISICO_OMSCHRIJVING_OF_BEVINDING            = @RISICO_OMSCHRIJVING_OF_BEVINDING,
				HUIDIGE_BEHEERSMAATREGEL                    = @HUIDIGE_BEHEERSMAATREGEL,
				VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL = @VOORGESTELDE_ACTIE_OF_VERBETERINGSMAATREGEL,
				VOOR_ERNST_VAN_ONGEVAL                  = @VOOR_ERNST_VAN_ONGEVAL,
				VOOR_KANS_OP_BLOOTSTELLING                  = @VOOR_KANS_OP_BLOOTSTELLING,
				VOOR_KANS_OP_WAARSCHIJNLIJKHEID             = @VOOR_KANS_OP_WAARSCHIJNLIJKHEID,
				AFWIJKENDE_ACTIE_TER_UITVOERING             = @AFWIJKENDE_ACTIE_TER_UITVOERING,
				RESTRISICO                                  = @RESTRISICO,
				NA_ERNST_VAN_ONGEVAL                        = @NA_ERNST_VAN_ONGEVAL,
				NA_KANS_OP_BLOOTSTELLING                    = @NA_KANS_OP_BLOOTSTELLING,
				NA_KANS_OP_WAARSCHIJNLIJKHEID               = @NA_KANS_OP_WAARSCHIJNLIJKHEID
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			      AND RAPPORTNUMMER = @RAPPORTNUMMER
			      AND REGELNUMMER = @REGELNUMMER
			UPDATE VISUELE_BEOORDELING
			SET PROCES             = @PROCES,
				MACHINE_ONDERDEEL_ = @MACHINE_ONDERDEEL_,
				AFDELING           = @AFDELING
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			      AND RAPPORTNUMMER = @RAPPORTNUMMER
			      AND REGELNUMMER = @REGELNUMMER

			UPDATE MACHINEVEILIGHEID
			SET PID                                           = @PID,
				LIJN                                          = @LIJN,
				MACHINE_CODE                                  = @MACHINE_CODE,
				MACHINE                                       = @MACHINE,
				MODEL_TYPE                                    = @MODEL_TYPE,
				SERIENUMMER                                   = @SERIENUMMER,
				LEVERANCIER                                   = @LEVERANCIER,
				CE_MARKERING                                  = @CE_MARKERING,
				CE_DOCUCHECK                                  = @CE_DOCUCHECK,
				AANVULLENDE_OMSCHRIJVING                      = @AANVULLENDE_OMSCHRIJVING,
				TAKEN                                         = @TAKEN,
				TRANSPORT                                     = @TRANSPORT,
				MONTAGE                                       = @MONTAGE,
				IN_BEDRIJFSNAME                               = @IN_BEDRIJFSNAME,
				TIJDENS_PRODUCTIE                             = @TIJDENS_PRODUCTIE,
				TIJDENS_ONDERHOUD                             = @TIJDENS_ONDERHOUD,
				TIJDENS_STORING                               = @TIJDENS_STORING,
				TIJDENS_REINIGEN                              = @TIJDENS_REINIGEN,
				TIJDENS_AFSTELLEN                             = @TIJDENS_AFSTELLEN,
				DEMONTAGE                                     = @DEMONTAGE,
				ONTWERP                                       = @ONTWERP,
				AFSCHERMING                                   = @AFSCHERMING,
				INSTRUCTIE                                    = @INSTRUCTIE,
				FREQUENTIE                                    = @FREQUENTIE,
				MOGELIJKHEID_OPTREDEN_GEVAARLIJKE_GEBEURTENIS = @MOGELIJKHEID_OPTREDEN_GEVAARLIJKE_GEBEURTENIS,
				MOGELIJKHEID_VOORKOMEN_OF_BEPERKEN_SCHADE     = @MOGELIJKHEID_VOORKOMEN_OF_BEPERKEN_SCHADE,
				ERNST_VAN_DE_GEVOLGEN                         = @ERNST_VAN_DE_GEVOLGEN
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			      AND RAPPORTNUMMER = @RAPPORTNUMMER
			      AND REGELNUMMER = @REGELNUMMER
		END
		ELSE
			RAISERROR ('Om deze SP te gebruiken moet RAPPORT.RAPPORT_TYPE "Machineveiligheid" zijn.', 16, 1)
		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
	END CATCH
END
GO

/*==============================================================*/
/* DELETE EEN RISICOREGEL										*/
/*==============================================================*/
CREATE PROCEDURE SP_DELETE_RISICOREGEL
	@PROJECTNUMMER INT,
	@RAPPORTNUMMER INT,
	@REGELNUMMER INT
AS BEGIN
	-- Transaction level default omdat de procedure enkel een INSERT/UPDATE/DELETE doet.

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter INT;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION ProcedureSave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		DELETE from RISICOREGEL
		WHERE PROJECTNUMMER = @PROJECTNUMMER
		AND RAPPORTNUMMER = @RAPPORTNUMMER
		AND REGELNUMMER = @REGELNUMMER

	IF @TranCounter = 0 AND XACT_STATE() = 1
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	IF @TranCounter = 0
		BEGIN
			IF XACT_STATE() = 1
				ROLLBACK TRANSACTION;
		END;
	ELSE
		BEGIN
			IF XACT_STATE() <> -1
				ROLLBACK TRANSACTION ProcedureSave;
		END;
	THROW
	END CATCH
END
GO

/*==============================================================*/
/* INSERT EEN PLAN VAN AANPAK									*/
/*==============================================================*/
CREATE PROCEDURE SP_INSERT_PLAN_VAN_AANPAK
	@PROJECTNUMMER INT,
	@RAPPORTNUMMER INT,
	@REGELNUMMER INT,
	@UITGEVOERD_DOOR VARCHAR(255),
	@EINDVERANTWOORDELIJKE VARCHAR(255),
	@DATUM_GEREED_GEPLAND DATE,
	@PBM VARCHAR(255),
	@VOORLICHTING VARCHAR(255),
	@WERKINSTRUCTIE_PROCEDURE VARCHAR(255),
	@TRA VARCHAR(255),
	@CONTRACT_LIJST_ VARCHAR(255)
AS BEGIN
	SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
	-- Nonrepeatable read mogelijk bij:
	-- EXISTS
	-- Phantom niet relevant bij:
	-- EXISTS

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter int;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION proceduresave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		IF EXISTS (
			SELECT 1
			FROM RISICOREGEL
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			AND RAPPORTNUMMER = @RAPPORTNUMMER
			AND REGELNUMMER = @REGELNUMMER
		) BEGIN
			INSERT PLAN_VAN_AANPAK
			VALUES (
				@PROJECTNUMMER,
				@RAPPORTNUMMER,
				@REGELNUMMER,
				@UITGEVOERD_DOOR,
				@EINDVERANTWOORDELIJKE,
				@DATUM_GEREED_GEPLAND,
				@PBM, @VOORLICHTING,
				@WERKINSTRUCTIE_PROCEDURE,
				@TRA,
				@CONTRACT_LIJST_
			)
		END ELSE BEGIN
			RAISERROR ('Om deze SP te kunnen gebruiken dient de combinatie projectnummer+rapportnummer+regelnummer te bestaan.', 16, 1)
		END

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY

	BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
	END CATCH
END
GO

/*==============================================================*/
/* UPDATE EEN PLAN VAN AANPAK									*/
/*==============================================================*/
GO
CREATE PROCEDURE SP_UPDATE_PLAN_VAN_AANPAK
	@PROJECTNUMMER INT,
	@RAPPORTNUMMER INT,
	@REGELNUMMER INT,
	@UITGEVOERD_DOOR VARCHAR(255),
	@EINDVERANTWOORDELIJKE VARCHAR(255),
	@DATUM_GEREED_GEPLAND DATE,
	@PBM VARCHAR(255),
	@VOORLICHTING VARCHAR(255),
	@WERKINSTRUCTIE_PROCEDURE VARCHAR(255),
	@TRA VARCHAR(255),
	@CONTRACT_LIJST_ VARCHAR(255)
AS BEGIN
	SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
	-- Nonrepeatable read mogelijk bij:
	-- EXISTS
	-- Phantom niet relevant bij:
	-- EXISTS

	SET NOCOUNT, XACT_ABORT ON
	DECLARE @TranCounter int;
	SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION proceduresave;
	ELSE
		BEGIN TRANSACTION;

	BEGIN TRY
		IF EXISTS (
			SELECT 1
			FROM PLAN_VAN_AANPAK
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			AND RAPPORTNUMMER = @RAPPORTNUMMER
			AND REGELNUMMER = @REGELNUMMER
		) BEGIN
			UPDATE PLAN_VAN_AANPAK
			SET PROJECTNUMMER = @PROJECTNUMMER,
				RAPPORTNUMMER = @RAPPORTNUMMER,
				REGELNUMMER = @REGELNUMMER,
				UITGEVOERD_DOOR = @UITGEVOERD_DOOR,
				EINDVERANTWOORDELIJKE = @EINDVERANTWOORDELIJKE,
				DATUM_GEREED_GEPLAND = @DATUM_GEREED_GEPLAND,
				PBM = @PBM, voorlichting = @VOORLICHTING,
				WERKINSTRUCTIE_PROCEDURE = @WERKINSTRUCTIE_PROCEDURE,
				TRA = @TRA,
				CONTRACT_LIJST_ = @CONTRACT_LIJST_
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			AND RAPPORTNUMMER = @RAPPORTNUMMER
			AND REGELNUMMER = @REGELNUMMER
		END ELSE BEGIN
			RAISERROR ('Om deze SP te kunnen gebruiken dient de combinatie projectnummer+rapportnummer+regelnummer te bestaan.', 16, 1)
		END

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
	END CATCH
END
GO

/*==============================================================*/
/* INSERT EEN PERIODIEKE BEOORDELING							*/
/*==============================================================*/
GO
CREATE PROCEDURE SP_INSERT_PERIODIEKE_BEOORDELING
    @PROJECTNUMMER INT,
    @RAPPORTNUMMER INT,
    @REGELNUMMER INT,
    @DATUM_BEOORDELING DATE,
    @INSPECTIE_IS_DE_ACTIE_UITGEVOERD BIT,
    @OPMERKING_STAND_VAN_ZAKEN TEXT,
    @STAND_VAN_ZAKEN VARCHAR(255),
    @SCORE NUMERIC
AS BEGIN
	SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
	-- Nonrepeatable read mogelijk bij:
	-- EXISTS
	-- Phantom niet relevant bij:
	-- EXISTS

	SET NOCOUNT, XACT_ABORT ON
    DECLARE @TranCounter int;
    SET @TranCounter = @@TRANCOUNT;

    IF @TranCounter > 0
      SAVE TRANSACTION proceduresave;
    ELSE
      BEGIN TRANSACTION;

    BEGIN TRY
		IF EXISTS (
			SELECT 1
            FROM PLAN_VAN_AANPAK
            WHERE projectnummer = @PROJECTNUMMER
            AND rapportnummer = @RAPPORTNUMMER
            AND regelnummer = @REGELNUMMER
		) BEGIN
			INSERT PERIODIEKE_BEOORDELING
			VALUES (@PROJECTNUMMER, @RAPPORTNUMMER, @REGELNUMMER, @DATUM_BEOORDELING, @INSPECTIE_IS_DE_ACTIE_UITGEVOERD, @OPMERKING_STAND_VAN_ZAKEN, @STAND_VAN_ZAKEN, @SCORE)
		END ELSE BEGIN
			RAISERROR ('Om deze SP te kunnen gebruiken dient het plan van aanpak te bestaan.', 16, 1)
		END

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
	END CATCH
END
GO

/*==============================================================*/
/* UPDATE EEN PERIODIEKE BEOORDELING							*/
/*==============================================================*/
GO
CREATE PROCEDURE SP_UPDATE_PERIODIEKE_BEOORDELING
    @PROJECTNUMMER INT,
    @RAPPORTNUMMER INT,
    @REGELNUMMER INT,
    @DATUM_BEOORDELING_OUD DATE,
    @DATUM_BEOORDELING_NIEUW DATE,
    @INSPECTIE_IS_DE_ACTIE_UITGEVOERD BIT,
    @OPMERKING_STAND_VAN_ZAKEN VARCHAR(8000),
    @STAND_VAN_ZAKEN VARCHAR(255),
    @SCORE NUMERIC
AS BEGIN
	SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
	-- Nonrepeatable read mogelijk bij:
	-- EXISTS
	-- Phantom niet relevant bij:
	-- EXISTS

    SET NOCOUNT, XACT_ABORT ON
    DECLARE @TranCounter int;
    SET @TranCounter = @@TRANCOUNT;

	IF @TranCounter > 0
		SAVE TRANSACTION proceduresave;
    ELSE
		BEGIN TRANSACTION;

    BEGIN TRY
		IF EXISTS (
			SELECT 1
			FROM PERIODIEKE_BEOORDELING
			WHERE projectnummer = @PROJECTNUMMER
			AND rapportnummer = @RAPPORTNUMMER
			AND regelnummer = @REGELNUMMER
			AND datum_beoordeling = @DATUM_BEOORDELING_OUD
		) BEGIN
			UPDATE PERIODIEKE_BEOORDELING
			SET DATUM_BEOORDELING = @DATUM_BEOORDELING_NIEUW,
				INSPECTIE_IS_DE_ACTIE_UITGEVOERD = @INSPECTIE_IS_DE_ACTIE_UITGEVOERD,
				OPMERKING_STAND_VAN_ZAKEN = @OPMERKING_STAND_VAN_ZAKEN,
				STAND_VAN_ZAKEN = @STAND_VAN_ZAKEN,
				SCORE = @SCORE
			WHERE PROJECTNUMMER = @PROJECTNUMMER
			AND RAPPORTNUMMER = @RAPPORTNUMMER
			AND REGELNUMMER = @REGELNUMMER
			AND DATUM_BEOORDELING = @DATUM_BEOORDELING_OUD
		END ELSE BEGIN
			RAISERROR ('Om deze SP te kunnen gebruiken dient het desbetreffende periodieke beoordeling te bestaan.', 16, 1)
		END

		IF @TranCounter = 0 AND XACT_STATE() = 1
			COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @TranCounter = 0
			BEGIN
				IF XACT_STATE() = 1
					ROLLBACK TRANSACTION;
			END;
		ELSE
			BEGIN
				IF XACT_STATE() <> -1
					ROLLBACK TRANSACTION ProcedureSave;
			END;
		THROW
	END CATCH
END
GO
